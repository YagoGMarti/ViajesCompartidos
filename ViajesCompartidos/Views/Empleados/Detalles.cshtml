@model SistemaViajesCompartidos.Models.EmpleadoModel

@{
    ViewBag.Title = "Details";
}


<div class="form-group">
    <div class="col-lg-11">
        <h3> Empleado </h3>
        <hr />
</div>
<div class="col-lg-1">
    @if (@Session["Empleado_ID"].ToString() == Model.ID.ToString())
    {
        if (Model.Vehiculo == null)
        {
            <a class="btn btn-default buttonOffset15 botonCentrado" href="@Url.Action("Crear", "Vehiculos" )">Vehiculo &raquo;</a>
        }
        else
        {
            <a class="btn btn-default buttonOffset15 botonCentrado" href="@Url.Action("Editar", "Vehiculos", new { ID = Model.Vehiculo.ID } )">Ver Vehiculo &raquo;</a>
        }
    }
    <hr />
</div>
</div>

<div class="form-group" style="display:inline-flex">
    <hr />
    <div class="form-horizontal col-md-7">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { disabled = "disabled", @class = "form-control text-center" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CorreoElectronico, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.CorreoElectronico, new { htmlAttributes = new { disabled = "disabled", @class = "form-control text-center" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { disabled = "disabled", @class = "form-control text-center" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RRHH, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.RRHH, new { htmlAttributes = new { disabled = "disabled", @class = "form-control text-center" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Ubicacion.UbicacionTexto, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Ubicacion.UbicacionTexto, new { htmlAttributes = new { disabled = "disabled", @class = "form-control text-center" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SucursalModel_ID, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.SucursalModel_ID, (IEnumerable<SelectListItem>)(ViewBag.Sucursales), new { disabled = "disabled", @class = "form-control text-center" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Horario, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Horario, new { htmlAttributes = new { disabled = "disabled", @class = "form-control text-center" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FechaAlta, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.FechaAlta, new { disabled = "disabled", @type = "date", @Value = Model.FechaAlta.ToString("yyyy-MM-dd"), @class = "form-control text-center" })
            </div>
        </div>

        @if (Model.Vehiculo != null)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Vehiculo.Patente, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Vehiculo.Patente, new { htmlAttributes = new { disabled = "disabled", @class = "form-control text-center" } })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Vehiculo.AsientosLibres, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Vehiculo.AsientosLibres, new { htmlAttributes = new { disabled = "disabled", @class = "form-control text-center" } })
                </div>
            </div>
            <div class="form-group">
                <div class="col-lg-2 col-lg-offset-4">
                    @if (Model.Vehiculo.ValidoRuta)
                    {
                        <a class="btn btn-default buttonOffset15 botonCentrado" href="@Url.Action("ObtenerRuta", "Rutas", new { Empleado_ID = Model.ID } )">Obtener nueva ruta &raquo;</a>
                    }
                </div>
            </div>
        }
    </div>

    <div class="form-horizontal col-md-5">
        <div class="form-group">
            <h4>Dirección</h4>
            <div class="map mapa" id="mapa">

            </div>
        </div>

        @if (Model.Recorrido_ID != null && Model.RecorridoActivo)
        {
            <div class="form-group">
                <h4>Recorrido</h4>

                <div class="route mapa" id="recorrido">

                </div>
            </div>
        }

    </div>
</div>
@if (Model.Recorrido_ID != null && Model.RecorridoActivo)
{
    <div class="form-group">
        <div class="col-lg-12">
            <hr />
        </div>
        <div class="col-lg-11">
            <h3>Recorrido</h3>
        </div>

        <div class="col-lg-1">
            <a class="btn btn-default buttonOffset15 botonCentrado" href="@Url.Action("RemoverPasajero", "Rutas", new { Recorrido_ID = Model.Recorrido.ID, Pasajero_ID = Model.ID } )">Cancelar ruta &raquo;</a>
        </div>
        <div class="col-lg-12">
            <hr />
        </div>
        <div class="col-lg-12">
            <table class="table">
                <tr>
                    @if ((@Session["Empleado_ID"]).ToString() == Model.Recorrido.Conductor_ID.ToString())
                    {
                        <th class="col-lg-1 text-center">
                            Pasajeros
                        </th>
                    }
                    else
                    {
                        <th class="col-lg-1 text-center">
                            Conductor
                        </th>
                    }

                    <th class="col-lg-2 text-center">
                        Email
                    </th>
                    <th class="col-lg-2 text-center">
                        Teléfono
                    </th>
                    <th class="col-lg-4 text-center">
                        Dirección
                    </th>
                    <th class="col-lg-1 text-center">

                    </th>
                </tr>
                @foreach (var item in Model.Recorrido.Pasajeros)
                {
                    <tr>
                        <td class="text-center">
                            @Html.DisplayFor(modelItem => item.Nombre)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(modelItem => item.CorreoElectronico)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(modelItem => item.Telefono)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(modelItem => item.Ubicacion.UbicacionTexto)
                        </td>
                        <td class="text-center">
                            @if ((@Session["Empleado_ID"]).ToString() == Model.Recorrido.Conductor_ID.ToString())
                            {
                                @Html.ActionLink("Remover", "RemoverPasajero", "Rutas", new { Recorrido_ID = Model.Recorrido.ID, Pasajero_ID = item.ID }, new { })
                            }
                        </td>
                    </tr>
                }
            </table>
        </div>
    </div>
}

@section Scripts {
    <script type="text/javascript">
            function initializeMap() {
                const map = new google.maps.Map(document.getElementById("mapa"), {
                    zoom: 16,
                    center: new google.maps.LatLng('@ViewBag.Latitud', '@ViewBag.Longitud'),
                    mapTypeControl: false,
                    fullscreenControl: false,
                    zoomControl: true,
                    streetViewControl: false
                });

                const marker = new google.maps.Marker({ map: map, draggable: false });
                marker.setPosition(new google.maps.LatLng('@ViewBag.Latitud', '@ViewBag.Longitud'));
                marker.setVisible(true);

                if ('@ViewBag.Ruta' == "True") {
                    try {
                        loadDirections();
                    } catch (error) {
                        console.error(error);
                    }
                }
        };

        function loadDirections() {
                var origen = new google.maps.LatLng('@ViewBag.OrigenLatitud', '@ViewBag.OrigenLongitud');
                var destino = new google.maps.LatLng('@ViewBag.DestinoLatitud', '@ViewBag.DestinoLongitud');

                const mapOptions = {
                    zoom: 16,
                    center: new google.maps.LatLng('@ViewBag.CentroLatitud', '@ViewBag.CentroLongitud'),
                    mapTypeControl: false,
                    fullscreenControl: false,
                    zoomControl: true,
                    streetViewControl: false
                }

                const map = new google.maps.Map(document.getElementById("recorrido"), mapOptions),
                    directionsService = new google.maps.DirectionsService,
                    directionsDisplay = new google.maps.DirectionsRenderer({
                        map: map
                    });

                calculateAndDisplayRoute(directionsService, directionsDisplay, origen, destino);

        };

        function calculateAndDisplayRoute(directionsService, directionsDisplay, origen, destino) {
            let escalas = [];
            var ubicaciones = @Html.Raw(Json.Encode(@ViewBag.Ubicaciones));
            console.log(ubicaciones);
            console.log(ubicaciones[0]);
            console.log(ubicaciones[1]);

            for (let i = 2; i < (ubicaciones.length - 2); i = i + 2) {
                escalas.push({
                    location: new google.maps.LatLng(ubicaciones[i], ubicaciones[i+1]),
                    stopover: false
                });
            }

            console.log(escalas);

            directionsService.route({
                origin: origen,
                destination: destino,
                waypoints: escalas,
                avoidTolls: true,
                avoidHighways: false,
                travelMode: google.maps.TravelMode.DRIVING
            },
                function(response, status) {
                    if (status == google.maps.DirectionsStatus.OK) {
                        directionsDisplay.setDirections(response);
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                });
            };

    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDZrUINt7hq2Js-FUA_otyngMihK-VMRuY&libraries=places&callback=initializeMap&solution_channel=GMP_QB_addressselection_v1_cBC">

    </script>
}
