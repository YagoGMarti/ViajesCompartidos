@model SistemaViajesCompartidos.Models.EmpleadoModel

@{
    ViewBag.Title = "Create";
}

<h3>Registrar Empleado</h3>
<hr />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal col-md-7">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CorreoElectronico, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.CorreoElectronico, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CorreoElectronico, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RRHH, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.RRHH, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Roles, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Ubicacion.UbicacionTexto, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Ubicacion.UbicacionTexto, new { htmlAttributes = new { @class = "form-control", placeholder = "Escribir y luego seleccionar una opción" } })
                @Html.ValidationMessageFor(model => model.Ubicacion.UbicacionTexto, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SucursalModel_ID, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.SucursalModel_ID, (IEnumerable<SelectListItem>)(ViewBag.Sucursales), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SucursalModel_ID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HorarioIngreso, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                <input disabled="disabled" type="text" class="form-control text-center" id="horario" />
                @if (ViewBag.HorariosInvalidos != null)
                {
                    <span class="text-danger field-validation-error" data-valmsg-for="HorarioIngreso" data-valmsg-replace="true">
                        @ViewBag.HorariosInvalidos
                    </span>
                }
            </div>
        </div>

        <div class="form-group">
            <div class="form-control" style="width: 49%; margin-left: 35%;" id="slider"></div>
            @Html.HiddenFor(model => model.HorarioIngresoTexto)
            @Html.HiddenFor(model => model.HorarioSalidaTexto)
        </div>

        <div class="form-group">
            <div class="col-md-offset-4 col-md-8">
                <input type="submit" value="Crear" class="btn btn-default" />
            </div>
        </div>
    </div>

    <div class="form-horizontal col-md-5">
        <div class="form-group">
            <div class="map mapa" id="mapa">

            </div>
        </div>
        <div class="form-group">
            <div class="form-group">
                @Html.LabelFor(model => model.Ubicacion.LatitudTexto, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Ubicacion.LatitudTexto, new { @readonly = "readonly", @class = "form-control text-center" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Ubicacion.LongitudTexto, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Ubicacion.LongitudTexto, new { @readonly = "readonly", @class = "form-control text-center" })
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/jquery-ui.min.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            $("#slider").slider({
                range: false,
                min: 6,
                max: 22,
                values: [@ViewBag.Ingreso, @ViewBag.Salida],
                slide: function (event, ui) {
                    $("#horario").val(ui.values[0] + "Hs - " + ui.values[1] + "Hs    ");
                    $("#HorarioIngresoTexto").val(ui.values[0]);
                    $("#HorarioSalidaTexto").val(ui.values[1]);
                }
            });
            $("#horario").val($("#slider").slider("values", 0) +
                "Hs - " + $("#slider").slider("values", 1) + "Hs    ");
            $("#HorarioIngresoTexto").val($("#slider").slider("values", 0));
            $("#HorarioSalidaTexto").val($("#slider").slider("values", 1));
        });
    </script>

    <script type="text/javascript">
        function initializeMap() {

            const getFormInputElement = (component) => document.getElementById(component);
            const map = new google.maps.Map(document.getElementById("mapa"), {
                zoom: 16,
                center: new google.maps.LatLng('@ViewBag.Latitud', '@ViewBag.Longitud'),
                mapTypeControl: false,
                fullscreenControl: false,
                zoomControl: true,
                streetViewControl: false
            });

            const marker = new google.maps.Marker({ map: map, draggable: false });
            marker.setPosition(new google.maps.LatLng('@ViewBag.Latitud', '@ViewBag.Longitud'));
            marker.setVisible(true);

            const autocompleteInput = getFormInputElement('Ubicacion_UbicacionTexto');
            const autocomplete = new google.maps.places.Autocomplete(autocompleteInput, {
                fields: ["address_components", "geometry", "name"],
                types: ["address"],
            });

            autocomplete.addListener('place_changed', function () {
                marker.setVisible(false);
                const place = autocomplete.getPlace();
                if (!place.geometry) {
                    // User entered the name of a Place that was not suggested and
                    // pressed the Enter key, or the Place Details request failed.
                    window.alert('No details available for input: \'' + place.name + '\'');
                    return;
                }
                renderAddress(place);
                fillInAddress(place);
            });

            function fillInAddress(place) {  // optional parameter
                const addressNameFormat = {
                    'street_number': 'short_name',
                    'route': 'long_name',
                    'locality': 'long_name',
                    'administrative_area_level_1': 'short_name',
                    'country': 'long_name',
                    'postal_code': 'short_name',
                };
                const getAddressComp = function (type) {
                    for (const component of place.address_components) {
                        if (component.types[0] === type) {
                            return component[addressNameFormat[type]];
                        }
                    }
                    return '';
                };

                getFormInputElement('Ubicacion_LatitudTexto').value = place.geometry.location.lat();
                getFormInputElement('Ubicacion_LongitudTexto').value = place.geometry.location.lng();
                getFormInputElement('Ubicacion_UbicacionTexto').value =
                    getAddressComp('route') + ' ' +
                    getAddressComp('street_number') + ', ' +
                    getAddressComp('locality') + ', ' +
                    getAddressComp('country');
            }

            function renderAddress(place) {
                map.setCenter(place.geometry.location);
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);
            }
        }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDZrUINt7hq2Js-FUA_otyngMihK-VMRuY&libraries=places&callback=initializeMap&solution_channel=GMP_QB_addressselection_v1_cBC"></script>
}